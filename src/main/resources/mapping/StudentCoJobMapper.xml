<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.StudentCoJobMapper" >
    <resultMap id="BaseResultMap" type="com.example.entity.Job" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="sid" property="sid" jdbcType="INTEGER" />
        <result column="jid" property="jid" jdbcType="INTEGER" />
        <result column="createdate" property="createdate" jdbcType="TIMESTAMP" />
        <result column="state" property="state" jdbcType="INTEGER" />
    </resultMap>
    <insert id="add" useGeneratedKeys="true" keyProperty="id" parameterType="com.example.entity.Studentcojob">
        insert into Studentcojob (id,jid,sid,createdate,Studentcojob.state)
            value (#{id},#{jid},#{sid},#{createdate},#{state})
    </insert>
    <update id="update" parameterType="com.example.entity.Studentcojob">
        update Studentcojob
        set Studentcojob.state=#{state}
        where jid=#{jid} and sid=#{sid}
    </update>
    <sql id="Example_Where_Clause" >
        <where >
            <foreach collection="oredCriteria" item="criteria" separator="or" >
                <if test="criteria.valid" >
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <foreach collection="criteria.criteria" item="criterion" >
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause" >
        <where >
            <foreach collection="example.oredCriteria" item="criteria" separator="or" >
                <if test="criteria.valid" >
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <foreach collection="criteria.criteria" item="criterion" >
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List" >
        id, sid, jid, createdate, state
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.example.entity.StudentcojobExample" >
        select
        <if test="distinct" >
            distinct
        </if>
        <include refid="Base_Column_List" />
        from studentcojob
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null" >
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from studentcojob
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from studentcojob
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.example.entity.StudentcojobExample" >
        delete from studentcojob
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </delete>
    <insert id="insert" parameterType="com.example.entity.Studentcojob" >
        insert into studentcojob (id, sid, jid,
                                  createdate, state)
        values (#{id,jdbcType=INTEGER}, #{sid,jdbcType=INTEGER}, #{jid,jdbcType=INTEGER},
                #{createdate,jdbcType=TIMESTAMP}, #{state,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" parameterType="com.example.entity.Studentcojob" >
        insert into studentcojob
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="sid != null" >
                sid,
            </if>
            <if test="jid != null" >
                jid,
            </if>
            <if test="createdate != null" >
                createdate,
            </if>
            <if test="state != null" >
                state,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="sid != null" >
                #{sid,jdbcType=INTEGER},
            </if>
            <if test="jid != null" >
                #{jid,jdbcType=INTEGER},
            </if>
            <if test="createdate != null" >
                #{createdate,jdbcType=TIMESTAMP},
            </if>
            <if test="state != null" >
                #{state,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.example.entity.StudentcojobExample" resultType="java.lang.Integer" >
        select count(*) from studentcojob
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map" >
        update studentcojob
        <set >
            <if test="record.id != null" >
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.sid != null" >
                sid = #{record.sid,jdbcType=INTEGER},
            </if>
            <if test="record.jid != null" >
                jid = #{record.jid,jdbcType=INTEGER},
            </if>
            <if test="record.createdate != null" >
                createdate = #{record.createdate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.state != null" >
                state = #{record.state,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByExample" parameterType="map" >
        update studentcojob
        set id = #{record.id,jdbcType=INTEGER},
        sid = #{record.sid,jdbcType=INTEGER},
        jid = #{record.jid,jdbcType=INTEGER},
        createdate = #{record.createdate,jdbcType=TIMESTAMP},
        state = #{record.state,jdbcType=INTEGER}
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.example.entity.Studentcojob" >
        update studentcojob
        <set >
            <if test="sid != null" >
                sid = #{sid,jdbcType=INTEGER},
            </if>
            <if test="jid != null" >
                jid = #{jid,jdbcType=INTEGER},
            </if>
            <if test="createdate != null" >
                createdate = #{createdate,jdbcType=TIMESTAMP},
            </if>
            <if test="state != null" >
                state = #{state,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.example.entity.Studentcojob" >
        update studentcojob
        set sid = #{sid,jdbcType=INTEGER},
            jid = #{jid,jdbcType=INTEGER},
            createdate = #{createdate,jdbcType=TIMESTAMP},
            state = #{state,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>